import { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, Client } from 'discord.js';

/**
 * Utility class for building consistent help embeds with navigation
 */
export class HelpEmbedBuilder {
    private client: Client;

    constructor(client: Client) {
        this.client = client;
    }

    /**
     * Create a base embed with consistent styling
     */
    private createBaseEmbed(title: string, description: string, color: number = 0x5865F2): EmbedBuilder {
        return new EmbedBuilder()
            .setTitle(title)
            .setDescription(description)
            .setColor(color)
            .setThumbnail(this.client.user?.displayAvatarURL() || null)
            .setFooter({ 
                text: 'TicketMesh ‚Ä¢ Made with ‚ù§Ô∏è for Discord communities',
                iconURL: this.client.user?.displayAvatarURL() || undefined
            })
            .setTimestamp();
    }

    /**
     * Create navigation buttons for help categories
     */
    createNavigationButtons(currentCategory?: string): ActionRowBuilder<ButtonBuilder> {
        const row = new ActionRowBuilder<ButtonBuilder>();

        const categories = [
            { id: 'help_overview', label: 'Overview', emoji: 'üè†', style: ButtonStyle.Primary },
            { id: 'help_commands', label: 'Commands', emoji: 'üìã', style: ButtonStyle.Secondary },
            { id: 'help_setup', label: 'Setup', emoji: '‚öôÔ∏è', style: ButtonStyle.Secondary },
            { id: 'help_tickets', label: 'Tickets', emoji: 'üé´', style: ButtonStyle.Secondary },
            { id: 'help_permissions', label: 'Permissions', emoji: 'üîê', style: ButtonStyle.Secondary },
            { id: 'help_support', label: 'Support', emoji: 'üÜò', style: ButtonStyle.Success }
        ];

        categories.forEach(category => {
            const isCurrent = currentCategory === category.id;
            row.addComponents(
                new ButtonBuilder()
                    .setCustomId(category.id)
                    .setLabel(category.label)
                    .setStyle(isCurrent ? ButtonStyle.Primary : category.style)
                    .setEmoji(category.emoji)
                    .setDisabled(isCurrent)
            );
        });

        return row;
    }

    /**
     * Create quick action buttons
     */
    createQuickActionButtons(): ActionRowBuilder<ButtonBuilder> {
        return new ActionRowBuilder<ButtonBuilder>()
            .addComponents(
                new ButtonBuilder()
                    .setLabel('Join Support Server')
                    .setStyle(ButtonStyle.Link)
                    .setURL('https://discord.gg/ticketmesh')
                    .setEmoji('üí¨'),
                new ButtonBuilder()
                    .setLabel('Visit Website')
                    .setStyle(ButtonStyle.Link)
                    .setURL('https://ticketmesh.com')
                    .setEmoji('üåê'),
                new ButtonBuilder()
                    .setLabel('GitHub')
                    .setStyle(ButtonStyle.Link)
                    .setURL('https://github.com/ticketmesh/ticketmesh')
                    .setEmoji('üìö')
            );
    }

    /**
     * Build overview help embed
     */
    buildOverviewEmbed(): { embed: EmbedBuilder; components: ActionRowBuilder<ButtonBuilder>[] } {
        const embed = this.createBaseEmbed(
            'üé´ TicketMesh - Advanced Discord Ticket System',
            'Welcome to TicketMesh! A powerful, feature-rich ticket system designed to streamline your Discord server\'s support workflow.'
        );

        embed.addFields(
            {
                name: 'üöÄ Key Features',
                value: [
                    '‚Ä¢ **Interactive Setup Wizard** - Easy configuration process',
                    '‚Ä¢ **Multi-Category Tickets** - Support different types of requests',
                    '‚Ä¢ **Advanced Permissions** - Granular role-based access control',
                    '‚Ä¢ **Ticket Analytics** - Comprehensive statistics and insights',
                    '‚Ä¢ **Auto-Transcripts** - Automatic conversation logging',
                    '‚Ä¢ **Custom Branding** - Personalized ticket experience'
                ].join('\n'),
                inline: false
            },
            {
                name: 'üìã Quick Start',
                value: [
                    '1. Use `/setup-wizard` to configure your ticket system',
                    '2. Set up ticket categories and permissions',
                    '3. Create ticket panels for your users',
                    '4. Monitor with `/stats` command'
                ].join('\n'),
                inline: false
            },
            {
                name: 'üí° Need Help?',
                value: [
                    '‚Ä¢ Use the buttons below to navigate help categories',
                    '‚Ä¢ Use `/help <category>` for specific help topics',
                    '‚Ä¢ Join our support server for direct assistance'
                ].join('\n'),
                inline: false
            }
        );

        return {
            embed,
            components: [this.createNavigationButtons('help_overview')]
        };
    }

    /**
     * Build commands help embed
     */
    buildCommandsEmbed(): { embed: EmbedBuilder; components: ActionRowBuilder<ButtonBuilder>[] } {
        const embed = this.createBaseEmbed(
            'üìã TicketMesh Commands',
            'Here are all the available commands for TicketMesh:'
        );

        embed.addFields(
            {
                name: 'üîß Setup & Configuration',
                value: [
                    '`/setup-wizard` - Interactive setup wizard (Admin only)',
                    '`/debug config` - Check current configuration',
                    '`/debug transcript` - Test transcript generation'
                ].join('\n'),
                inline: false
            },
            {
                name: 'üìä Analytics & Statistics',
                value: [
                    '`/stats overview` - General ticket statistics',
                    '`/stats detailed` - Detailed analytics',
                    '`/stats export` - Export data to JSON',
                    '`/stats user <user>` - User-specific stats'
                ].join('\n'),
                inline: false
            },
            {
                name: '‚ÑπÔ∏è Information & Help',
                value: [
                    '`/help` - This help menu',
                    '`/userinfo` - User information (Right-click)',
                    '`/messageinfo` - Message information (Right-click)'
                ].join('\n'),
                inline: false
            }
        );

        return {
            embed,
            components: [this.createNavigationButtons('help_commands')]
        };
    }

    /**
     * Build setup help embed
     */
    buildSetupEmbed(): { embed: EmbedBuilder; components: ActionRowBuilder<ButtonBuilder>[] } {
        const embed = this.createBaseEmbed(
            '‚öôÔ∏è TicketMesh Setup Guide',
            'Follow these steps to set up your ticket system:'
        );

        embed.addFields(
            {
                name: '1Ô∏è‚É£ Initial Setup',
                value: [
                    '‚Ä¢ Use `/setup-wizard` to start the configuration process',
                    '‚Ä¢ Ensure you have Administrator permissions',
                    '‚Ä¢ The wizard will guide you through each step'
                ].join('\n'),
                inline: false
            },
            {
                name: '2Ô∏è‚É£ Configure Categories',
                value: [
                    '‚Ä¢ Set up different ticket categories (Support, Bug Reports, etc.)',
                    '‚Ä¢ Assign appropriate roles for each category',
                    '‚Ä¢ Configure auto-responses and welcome messages'
                ].join('\n'),
                inline: false
            },
            {
                name: '3Ô∏è‚É£ Set Permissions',
                value: [
                    '‚Ä¢ Configure who can create tickets',
                    '‚Ä¢ Set up support staff roles',
                    '‚Ä¢ Define moderator permissions'
                ].join('\n'),
                inline: false
            },
            {
                name: '4Ô∏è‚É£ Create Ticket Panels',
                value: [
                    '‚Ä¢ Use the setup wizard to create ticket panels',
                    '‚Ä¢ Place panels in appropriate channels',
                    '‚Ä¢ Test the system with `/debug config`'
                ].join('\n'),
                inline: false
            },
            {
                name: 'üîß Troubleshooting',
                value: [
                    '‚Ä¢ Use `/debug config` to check your setup',
                    '‚Ä¢ Verify bot permissions in server settings',
                    '‚Ä¢ Check channel permissions for ticket categories'
                ].join('\n'),
                inline: false
            }
        );

        return {
            embed,
            components: [this.createNavigationButtons('help_setup')]
        };
    }

    /**
     * Build tickets help embed
     */
    buildTicketsEmbed(): { embed: EmbedBuilder; components: ActionRowBuilder<ButtonBuilder>[] } {
        const embed = this.createBaseEmbed(
            'üé´ Using the Ticket System',
            'Learn how to effectively use TicketMesh\'s ticket system:'
        );

        embed.addFields(
            {
                name: 'üë§ For Users',
                value: [
                    '‚Ä¢ Click on ticket panel buttons to create tickets',
                    '‚Ä¢ Provide clear descriptions of your issue',
                    '‚Ä¢ Be patient while waiting for support',
                    '‚Ä¢ Use the close button when your issue is resolved'
                ].join('\n'),
                inline: false
            },
            {
                name: 'üõ†Ô∏è For Support Staff',
                value: [
                    '‚Ä¢ Monitor ticket channels for new requests',
                    '‚Ä¢ Use `/stats` to track ticket metrics',
                    '‚Ä¢ Close tickets when issues are resolved',
                    '‚Ä¢ Transcripts are automatically generated'
                ].join('\n'),
                inline: false
            },
            {
                name: 'üëë For Administrators',
                value: [
                    '‚Ä¢ Use `/stats` to monitor system performance',
                    '‚Ä¢ Configure settings with `/setup-wizard`',
                    '‚Ä¢ Use `/debug` commands for troubleshooting',
                    '‚Ä¢ Manage permissions and roles as needed'
                ].join('\n'),
                inline: false
            },
            {
                name: 'üìù Ticket Features',
                value: [
                    '‚Ä¢ **Auto-transcripts** - Conversations are logged automatically',
                    '‚Ä¢ **Multi-category** - Different types of support requests',
                    '‚Ä¢ **Role-based access** - Granular permission control',
                    '‚Ä¢ **Analytics** - Track performance and usage'
                ].join('\n'),
                inline: false
            }
        );

        return {
            embed,
            components: [this.createNavigationButtons('help_tickets')]
        };
    }

    /**
     * Build permissions help embed
     */
    buildPermissionsEmbed(): { embed: EmbedBuilder; components: ActionRowBuilder<ButtonBuilder>[] } {
        const embed = this.createBaseEmbed(
            'üîê Permissions & Roles Guide',
            'Understanding TicketMesh permissions and role requirements:'
        );

        embed.addFields(
            {
                name: 'ü§ñ Bot Permissions',
                value: [
                    '‚Ä¢ **Administrator** - Full access to all features',
                    '‚Ä¢ **Manage Channels** - Create and manage ticket channels',
                    '‚Ä¢ **Manage Roles** - Assign roles to support staff',
                    '‚Ä¢ **Send Messages** - Communicate in channels',
                    '‚Ä¢ **Embed Links** - Send rich embeds',
                    '‚Ä¢ **Attach Files** - Handle file uploads'
                ].join('\n'),
                inline: false
            },
            {
                name: 'üëë Administrator Role',
                value: [
                    '‚Ä¢ Access to `/setup-wizard`',
                    '‚Ä¢ Can use `/debug` commands',
                    '‚Ä¢ Full access to `/stats`',
                    '‚Ä¢ Can modify system configuration'
                ].join('\n'),
                inline: false
            },
            {
                name: 'üõ†Ô∏è Support Staff Roles',
                value: [
                    '‚Ä¢ Access to ticket channels',
                    '‚Ä¢ Can view ticket statistics',
                    '‚Ä¢ Can close and manage tickets',
                    '‚Ä¢ Configured during setup wizard'
                ].join('\n'),
                inline: false
            },
            {
                name: 'üë§ User Permissions',
                value: [
                    '‚Ä¢ Can create tickets via panels',
                    '‚Ä¢ Can interact in their ticket channels',
                    '‚Ä¢ Can close their own tickets',
                    '‚Ä¢ No special roles required'
                ].join('\n'),
                inline: false
            }
        );

        return {
            embed,
            components: [this.createNavigationButtons('help_permissions')]
        };
    }

    /**
     * Build support help embed
     */
    buildSupportEmbed(): { embed: EmbedBuilder; components: ActionRowBuilder<ButtonBuilder>[] } {
        const embed = this.createBaseEmbed(
            'üÜò Support & Contact Information',
            'Need additional help? Here\'s how to get support:'
        );

        embed.addFields(
            {
                name: 'üìö Documentation',
                value: [
                    '‚Ä¢ **Official Website** - [ticketmesh.com](https://ticketmesh.com)',
                    '‚Ä¢ **Setup Guide** - Complete configuration walkthrough',
                    '‚Ä¢ **API Documentation** - For developers and integrations'
                ].join('\n'),
                inline: false
            },
            {
                name: 'üí¨ Community Support',
                value: [
                    '‚Ä¢ **Discord Server** - Join our support community',
                    '‚Ä¢ **GitHub Issues** - Report bugs and request features',
                    '‚Ä¢ **Community Forums** - Get help from other users'
                ].join('\n'),
                inline: false
            },
            {
                name: 'üîß Troubleshooting',
                value: [
                    '‚Ä¢ Use `/debug config` to check your setup',
                    '‚Ä¢ Verify bot permissions in server settings',
                    '‚Ä¢ Check the logs for error messages',
                    '‚Ä¢ Try the setup wizard again if needed'
                ].join('\n'),
                inline: false
            },
            {
                name: '‚ö° Quick Fixes',
                value: [
                    '‚Ä¢ **Bot not responding?** - Check if it\'s online',
                    '‚Ä¢ **Commands not working?** - Verify bot permissions',
                    '‚Ä¢ **Tickets not creating?** - Check channel permissions',
                    '‚Ä¢ **Setup issues?** - Run `/setup-wizard` again'
                ].join('\n'),
                inline: false
            }
        );

        return {
            embed,
            components: [this.createNavigationButtons('help_support'), this.createQuickActionButtons()]
        };
    }

    /**
     * Build error help embed
     */
    buildErrorEmbed(title: string, description: string, suggestions: string[]): { embed: EmbedBuilder; components: ActionRowBuilder<ButtonBuilder>[] } {
        const embed = this.createBaseEmbed(title, description, 0xFF6B6B);

        embed.addFields(
            {
                name: 'üí° What to do:',
                value: suggestions.map(suggestion => `‚Ä¢ ${suggestion}`).join('\n'),
                inline: false
            }
        );

        const row = new ActionRowBuilder<ButtonBuilder>()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('help_support')
                    .setLabel('Get Support')
                    .setStyle(ButtonStyle.Secondary)
                    .setEmoji('üÜò')
            );

        return {
            embed,
            components: [row]
        };
    }
}
