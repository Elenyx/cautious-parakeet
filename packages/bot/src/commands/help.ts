import { 
    SlashCommandBuilder, 
    ChatInputCommandInteraction, 
    EmbedBuilder,
    ActionRowBuilder,
    ButtonBuilder,
    ButtonStyle,
    PermissionFlagsBits
} from 'discord.js';
import { ErrorLogger } from '../utils/ErrorLogger';

/**
 * Help command to provide comprehensive usage instructions and support information
 */
export const data = new SlashCommandBuilder()
    .setName('help')
    .setDescription('Get help and usage instructions for TicketMesh')
    .addSubcommand(subcommand =>
        subcommand
            .setName('overview')
            .setDescription('Get a general overview of TicketMesh features')
    )
    .addSubcommand(subcommand =>
        subcommand
            .setName('commands')
            .setDescription('View all available commands and their usage')
    )
    .addSubcommand(subcommand =>
        subcommand
            .setName('setup')
            .setDescription('Get help with setting up the ticket system')
    )
    .addSubcommand(subcommand =>
        subcommand
            .setName('tickets')
            .setDescription('Learn how to use the ticket system')
    )
    .addSubcommand(subcommand =>
        subcommand
            .setName('permissions')
            .setDescription('Understand required permissions and roles')
    )
    .addSubcommand(subcommand =>
        subcommand
            .setName('support')
            .setDescription('Get support and contact information')
    );

export async function execute(interaction: ChatInputCommandInteraction) {
    const errorLogger = ErrorLogger.getInstance();

    try {
        const subcommand = interaction.options.getSubcommand();

        switch (subcommand) {
            case 'overview':
                await handleOverview(interaction);
                break;
            case 'commands':
                await handleCommands(interaction);
                break;
            case 'setup':
                await handleSetup(interaction);
                break;
            case 'tickets':
                await handleTickets(interaction);
                break;
            case 'permissions':
                await handlePermissions(interaction);
                break;
            case 'support':
                await handleSupport(interaction);
                break;
            default:
                await interaction.reply({
                    content: '‚ùå Unknown help category. Use `/help` to see available options.',
                    ephemeral: true
                });
        }

    } catch (error) {
        console.error('Error in help command:', error);
        await errorLogger.logCommandError(error as Error, {
            guildId: interaction.guildId || undefined,
            userId: interaction.user.id,
            commandName: 'help'
        });

        const errorMessage = '‚ùå An error occurred while fetching help information.';
        if (interaction.replied || interaction.deferred) {
            await interaction.followUp({ content: errorMessage, ephemeral: true });
        } else {
            await interaction.reply({ content: errorMessage, ephemeral: true });
        }
    }
}

/**
 * Show general overview of TicketMesh features
 */
async function handleOverview(interaction: ChatInputCommandInteraction) {
    const embed = new EmbedBuilder()
        .setTitle('üé´ TicketMesh - Advanced Discord Ticket System')
        .setDescription('Welcome to TicketMesh! A powerful, feature-rich ticket system designed to streamline your Discord server\'s support workflow.')
        .setColor(0x5865F2)
        .setThumbnail(interaction.client.user?.displayAvatarURL() || null)
        .addFields(
            {
                name: 'üöÄ Key Features',
                value: [
                    '‚Ä¢ **Interactive Setup Wizard** - Easy configuration process',
                    '‚Ä¢ **Multi-Category Tickets** - Support different types of requests',
                    '‚Ä¢ **Advanced Permissions** - Granular role-based access control',
                    '‚Ä¢ **Ticket Analytics** - Comprehensive statistics and insights',
                    '‚Ä¢ **Auto-Transcripts** - Automatic conversation logging',
                    '‚Ä¢ **Custom Branding** - Personalized ticket experience'
                ].join('\n'),
                inline: false
            },
            {
                name: 'üìã Quick Start',
                value: [
                    '1. Use `/setup-wizard` to configure your ticket system',
                    '2. Set up ticket categories and permissions',
                    '3. Create ticket panels for your users',
                    '4. Monitor with `/stats` command'
                ].join('\n'),
                inline: false
            },
            {
                name: 'üí° Need Help?',
                value: [
                    '‚Ä¢ Use `/help commands` for all available commands',
                    '‚Ä¢ Use `/help setup` for configuration guidance',
                    '‚Ä¢ Use `/help support` for additional assistance'
                ].join('\n'),
                inline: false
            }
        )
        .setFooter({ 
            text: 'TicketMesh ‚Ä¢ Made with ‚ù§Ô∏è for Discord communities',
            iconURL: interaction.client.user?.displayAvatarURL() || undefined
        })
        .setTimestamp();

    const row = new ActionRowBuilder<ButtonBuilder>()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('help_commands')
                .setLabel('View Commands')
                .setStyle(ButtonStyle.Primary)
                .setEmoji('üìã'),
            new ButtonBuilder()
                .setCustomId('help_setup')
                .setLabel('Setup Guide')
                .setStyle(ButtonStyle.Secondary)
                .setEmoji('‚öôÔ∏è'),
            new ButtonBuilder()
                .setCustomId('help_support')
                .setLabel('Get Support')
                .setStyle(ButtonStyle.Success)
                .setEmoji('üÜò')
        );

    await interaction.reply({ embeds: [embed], components: [row] });
}

/**
 * Show all available commands
 */
async function handleCommands(interaction: ChatInputCommandInteraction) {
    const embed = new EmbedBuilder()
        .setTitle('üìã TicketMesh Commands')
        .setDescription('Here are all the available commands for TicketMesh:')
        .setColor(0x5865F2)
        .addFields(
            {
                name: 'üîß Setup & Configuration',
                value: [
                    '`/setup-wizard` - Interactive setup wizard (Admin only)',
                    '`/debug config` - Check current configuration',
                    '`/debug transcript` - Test transcript generation'
                ].join('\n'),
                inline: false
            },
            {
                name: 'üìä Analytics & Statistics',
                value: [
                    '`/stats overview` - General ticket statistics',
                    '`/stats detailed` - Detailed analytics',
                    '`/stats export` - Export data to JSON',
                    '`/stats user <user>` - User-specific stats'
                ].join('\n'),
                inline: false
            },
            {
                name: '‚ÑπÔ∏è Information & Help',
                value: [
                    '`/help` - This help menu',
                    '`/userinfo` - User information (Right-click)',
                    '`/messageinfo` - Message information (Right-click)'
                ].join('\n'),
                inline: false
            }
        )
        .setFooter({ 
            text: 'Use /help <category> for detailed information about specific topics',
            iconURL: interaction.client.user?.displayAvatarURL() || undefined
        })
        .setTimestamp();

    await interaction.reply({ embeds: [embed] });
}

/**
 * Show setup guidance
 */
async function handleSetup(interaction: ChatInputCommandInteraction) {
    const embed = new EmbedBuilder()
        .setTitle('‚öôÔ∏è TicketMesh Setup Guide')
        .setDescription('Follow these steps to set up your ticket system:')
        .setColor(0x5865F2)
        .addFields(
            {
                name: '1Ô∏è‚É£ Initial Setup',
                value: [
                    '‚Ä¢ Use `/setup-wizard` to start the configuration process',
                    '‚Ä¢ Ensure you have Administrator permissions',
                    '‚Ä¢ The wizard will guide you through each step'
                ].join('\n'),
                inline: false
            },
            {
                name: '2Ô∏è‚É£ Configure Categories',
                value: [
                    '‚Ä¢ Set up different ticket categories (Support, Bug Reports, etc.)',
                    '‚Ä¢ Assign appropriate roles for each category',
                    '‚Ä¢ Configure auto-responses and welcome messages'
                ].join('\n'),
                inline: false
            },
            {
                name: '3Ô∏è‚É£ Set Permissions',
                value: [
                    '‚Ä¢ Configure who can create tickets',
                    '‚Ä¢ Set up support staff roles',
                    '‚Ä¢ Define moderator permissions'
                ].join('\n'),
                inline: false
            },
            {
                name: '4Ô∏è‚É£ Create Ticket Panels',
                value: [
                    '‚Ä¢ Use the setup wizard to create ticket panels',
                    '‚Ä¢ Place panels in appropriate channels',
                    '‚Ä¢ Test the system with `/debug config`'
                ].join('\n'),
                inline: false
            },
            {
                name: 'üîß Troubleshooting',
                value: [
                    '‚Ä¢ Use `/debug config` to check your setup',
                    '‚Ä¢ Verify bot permissions in server settings',
                    '‚Ä¢ Check channel permissions for ticket categories'
                ].join('\n'),
                inline: false
            }
        )
        .setFooter({ 
            text: 'Need more help? Use /help support for additional assistance',
            iconURL: interaction.client.user?.displayAvatarURL() || undefined
        })
        .setTimestamp();

    await interaction.reply({ embeds: [embed] });
}

/**
 * Show ticket system usage guide
 */
async function handleTickets(interaction: ChatInputCommandInteraction) {
    const embed = new EmbedBuilder()
        .setTitle('üé´ Using the Ticket System')
        .setDescription('Learn how to effectively use TicketMesh\'s ticket system:')
        .setColor(0x5865F2)
        .addFields(
            {
                name: 'üë§ For Users',
                value: [
                    '‚Ä¢ Click on ticket panel buttons to create tickets',
                    '‚Ä¢ Provide clear descriptions of your issue',
                    '‚Ä¢ Be patient while waiting for support',
                    '‚Ä¢ Use the close button when your issue is resolved'
                ].join('\n'),
                inline: false
            },
            {
                name: 'üõ†Ô∏è For Support Staff',
                value: [
                    '‚Ä¢ Monitor ticket channels for new requests',
                    '‚Ä¢ Use `/stats` to track ticket metrics',
                    '‚Ä¢ Close tickets when issues are resolved',
                    '‚Ä¢ Transcripts are automatically generated'
                ].join('\n'),
                inline: false
            },
            {
                name: 'üëë For Administrators',
                value: [
                    '‚Ä¢ Use `/stats` to monitor system performance',
                    '‚Ä¢ Configure settings with `/setup-wizard`',
                    '‚Ä¢ Use `/debug` commands for troubleshooting',
                    '‚Ä¢ Manage permissions and roles as needed'
                ].join('\n'),
                inline: false
            },
            {
                name: 'üìù Ticket Features',
                value: [
                    '‚Ä¢ **Auto-transcripts** - Conversations are logged automatically',
                    '‚Ä¢ **Multi-category** - Different types of support requests',
                    '‚Ä¢ **Role-based access** - Granular permission control',
                    '‚Ä¢ **Analytics** - Track performance and usage'
                ].join('\n'),
                inline: false
            }
        )
        .setFooter({ 
            text: 'Questions about tickets? Use /help support for more assistance',
            iconURL: interaction.client.user?.displayAvatarURL() || undefined
        })
        .setTimestamp();

    await interaction.reply({ embeds: [embed] });
}

/**
 * Show permissions and roles information
 */
async function handlePermissions(interaction: ChatInputCommandInteraction) {
    const embed = new EmbedBuilder()
        .setTitle('üîê Permissions & Roles Guide')
        .setDescription('Understanding TicketMesh permissions and role requirements:')
        .setColor(0x5865F2)
        .addFields(
            {
                name: 'ü§ñ Bot Permissions',
                value: [
                    '‚Ä¢ **Administrator** - Full access to all features',
                    '‚Ä¢ **Manage Channels** - Create and manage ticket channels',
                    '‚Ä¢ **Manage Roles** - Assign roles to support staff',
                    '‚Ä¢ **Send Messages** - Communicate in channels',
                    '‚Ä¢ **Embed Links** - Send rich embeds',
                    '‚Ä¢ **Attach Files** - Handle file uploads'
                ].join('\n'),
                inline: false
            },
            {
                name: 'üëë Administrator Role',
                value: [
                    '‚Ä¢ Access to `/setup-wizard`',
                    '‚Ä¢ Can use `/debug` commands',
                    '‚Ä¢ Full access to `/stats`',
                    '‚Ä¢ Can modify system configuration'
                ].join('\n'),
                inline: false
            },
            {
                name: 'üõ†Ô∏è Support Staff Roles',
                value: [
                    '‚Ä¢ Access to ticket channels',
                    '‚Ä¢ Can view ticket statistics',
                    '‚Ä¢ Can close and manage tickets',
                    '‚Ä¢ Configured during setup wizard'
                ].join('\n'),
                inline: false
            },
            {
                name: 'üë§ User Permissions',
                value: [
                    '‚Ä¢ Can create tickets via panels',
                    '‚Ä¢ Can interact in their ticket channels',
                    '‚Ä¢ Can close their own tickets',
                    '‚Ä¢ No special roles required'
                ].join('\n'),
                inline: false
            }
        )
        .setFooter({ 
            text: 'Permission issues? Check bot permissions in Server Settings > Integrations',
            iconURL: interaction.client.user?.displayAvatarURL() || undefined
        })
        .setTimestamp();

    await interaction.reply({ embeds: [embed] });
}

/**
 * Show support and contact information
 */
async function handleSupport(interaction: ChatInputCommandInteraction) {
    const embed = new EmbedBuilder()
        .setTitle('üÜò Support & Contact Information')
        .setDescription('Need additional help? Here\'s how to get support:')
        .setColor(0x5865F2)
        .addFields(
            {
                name: 'üìö Documentation',
                value: [
                    '‚Ä¢ **Official Website** - [ticketmesh.com](https://ticketmesh.com)',
                    '‚Ä¢ **Setup Guide** - Complete configuration walkthrough',
                    '‚Ä¢ **API Documentation** - For developers and integrations'
                ].join('\n'),
                inline: false
            },
            {
                name: 'üí¨ Community Support',
                value: [
                    '‚Ä¢ **Discord Server** - Join our support community',
                    '‚Ä¢ **GitHub Issues** - Report bugs and request features',
                    '‚Ä¢ **Community Forums** - Get help from other users'
                ].join('\n'),
                inline: false
            },
            {
                name: 'üîß Troubleshooting',
                value: [
                    '‚Ä¢ Use `/debug config` to check your setup',
                    '‚Ä¢ Verify bot permissions in server settings',
                    '‚Ä¢ Check the logs for error messages',
                    '‚Ä¢ Try the setup wizard again if needed'
                ].join('\n'),
                inline: false
            },
            {
                name: '‚ö° Quick Fixes',
                value: [
                    '‚Ä¢ **Bot not responding?** - Check if it\'s online',
                    '‚Ä¢ **Commands not working?** - Verify bot permissions',
                    '‚Ä¢ **Tickets not creating?** - Check channel permissions',
                    '‚Ä¢ **Setup issues?** - Run `/setup-wizard` again'
                ].join('\n'),
                inline: false
            }
        )
        .setFooter({ 
            text: 'Still need help? Join our Discord server for direct support!',
            iconURL: interaction.client.user?.displayAvatarURL() || undefined
        })
        .setTimestamp();

    const row = new ActionRowBuilder<ButtonBuilder>()
        .addComponents(
            new ButtonBuilder()
                .setLabel('Join Support Server')
                .setStyle(ButtonStyle.Link)
                .setURL('https://discord.gg/ticketmesh')
                .setEmoji('üí¨'),
            new ButtonBuilder()
                .setLabel('Visit Website')
                .setStyle(ButtonStyle.Link)
                .setURL('https://ticketmesh.com')
                .setEmoji('üåê'),
            new ButtonBuilder()
                .setLabel('GitHub')
                .setStyle(ButtonStyle.Link)
                .setURL('https://github.com/ticketmesh/ticketmesh')
                .setEmoji('üìö')
        );

    await interaction.reply({ embeds: [embed], components: [row] });
}
